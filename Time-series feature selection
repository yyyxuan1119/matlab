%算法1
D=eye(13,6600);%%% 
for  k=1:1:6600%%%样本
A=mts.train{1,1};
B=mts.train{1,k};
m=size(A,2);
n=size(B,2);
if(m<=n)
      B(:,m+1:n)=[];  
else
      A(:,n+1:m)=[];          
end
E{k}=A-B; 
D(:,k)=sqrt(sum(E{k}.^2,2));
end
C=sort(D,2);
C(:,1)=[];
K=2;
MIN=C(:,1:1:K);
MAX=C(:,m-K:1:m-1);
%MAX=C(:,k-K:1:k-1); %%CMU数据集使用
AMIN=sum(MIN,2)/2;
AMAX=sum(MAX,2)/2;
I=AMAX./AMIN;
[I1 I2]=sort(I,1,'descend');
i=1;
a=0;
b=sum(I);
k=13;%%%特征
for i=1:1:k
    a=a+I(i)/b;
    fprintf('符合的值为%f\n',I1(i))
    fprintf('对应的属性为%d\n',I2(i))
    if a<=0.8
        continue
    end
    break
end

for num=1:1:16%%%%改样本量
    mts.train{num}(48,:)=[];
    mts.train{num}(59,:)=[];%%%%这里需要判读
end                          %把原始数据删除不重要的属性


for num=1:1:16%%%%改样本量
    mts.train{num}(7,:)=[];
    mts.train{num}(9,:)=[];%%%%这里需要判读
    mts.train{num}(10,:)=[];
    mts.train{num}(10,:)=[];
    mts.train{num}(13,:)=[];%%%%这里需要判读
    mts.train{num}(16,:)=[];
    mts.train{num}(18,:)=[];
    mts.train{num}(21,:)=[];
    mts.train{num}(31,:)=[];
    mts.train{num}(31,:)=[];
    mts.train{num}(34,:)=[];
    mts.train{num}(39,:)=[];
    mts.train{num}(39,:)=[];
    
end                          %把原始数据删除不重要的属性
%把原始数据删除不重要的属性
% for num=1:1:1140
%     mts.train{num}(8,:)=[];
%     mts.train{num}(8,:)=[];
%     mts.train{num}(9,:)=[];
%     mts.train{num}(9,:)=[];
%     mts.train{num}(9,:)=[];
%     mts.train{num}(10,:)=[];
%     mts.train{num}(10,:)=[];
%     mts.train{num}(11,:)=[];
%     mts.train{num}(11,:)=[];
% end          
%删除测试集
for num=1:1:370%%%
    mts.test{num}(6,:)=[];
    mts.test{num}(11,:)=[];

end 
for num=1:1:10%%%%改样本量
    mts.test{num}(48,:)=[];
    mts.test{num}(59,:)=[];%%%%这里需要判读
end                          %把原始数据删除不重要的属性

for num=1:1:10%%%%改样本量
    mts.test{num}(7,:)=[];
    mts.test{num}(9,:)=[];%%%%这里需要判读
    mts.test{num}(10,:)=[];
    mts.test{num}(10,:)=[];
    mts.test{num}(13,:)=[];%%%%这里需要判读
    mts.test{num}(16,:)=[];
    mts.test{num}(18,:)=[];
    mts.test{num}(21,:)=[];
    mts.test{num}(31,:)=[];
    mts.test{num}(31,:)=[];
    mts.test{num}(34,:)=[];
    mts.test{num}(39,:)=[];
    mts.test{num}(39,:)=[];

end     



%计算了其余对象与x1的欧氏距离

D=eye(13,600);%%%对象
F=cell(1,600);%%%对象
for  a=1:1:10%%初约简后的属性
for  k=1:1:10%%初约简后的属性
A=mts.train{1,a};
B=mts.train{1,k};
m=size(A,2);
n=size(B,2);
if(m<=n)
      B(:,m+1:n)=[];  
else
      A(:,n+1:m)=[];          
end
E{k}=A-B; 
F{a}(:,k)=sqrt(sum(E{k}.^2,2));
end

end




G=F;
H=eye(11,10);
for i=1:1:10
    a=G{i};
    a(a>50)=-1;%%%邻域阈值
    G{i}=a;
    for j=1:1:11
        b=a(j,:);
        H(j,i)=sum(sum(b>0));
    end
end


L=cell(1,7000);
for i=1:1:10
n=0;
for j=1:1:11
for m=j+1:1:11
n=n+1;
L{i}(n,:)=F{i}(j,:)+F{i}(m,:);%L是邻域距离
end
end
end
M=L;
N=eye(78,10);
for i=1:1:10
    c=M{i};
    c(c>50)=-1;%%
    M{i}=c;
    for j=1:1:13
        b=c(j,:);
        N(j,i)=sum(sum(b>0));
    end
end
%bmUbn=N L算的只有对角线以后的两个元素的并


NMI=0;
for i=1:1:10
nui=-1/10*log2(H(1,i)*H(2,i)/(10*N(1,i)))%计算的是delta b1Ub2
NMI=NMI+nui
end


